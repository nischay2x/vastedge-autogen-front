{"version":3,"sources":["reducers/designerTable.js","reducers/index.js","config.js","api.js","component/DesignerTable.jsx","component/Sidebar.jsx","pages/DashboardHome.jsx","component/DatasetTable.jsx","pages/Datasets.jsx","pages/Pages.jsx","App.jsx","index.js"],"names":["designerTable","action","type","combineReducers","baseUrl","validCrudDataTypes","validDatasetTypes","validInputFieldTypes","getDistinctPages","axios","get","getDesignerColumnsByTableName","tableName","pageName","getCrudColumnsByTableName","postNewDataset","data","formatted","temp","Object","keys","forEach","k","allowNull","keepUnique","formatPostDataset","console","log","post","editDataset","id","formatEditDataset","patch","DesignerTable","rows","onRowEdit","onRowDelete","hideActions","className","scope","map","r","i","columnName","label","applyFilter","toString","displayMode","displayLength","isMaster","isJoinColumn","refTable","refColumn","onClick","e","Sidebar","useState","currentPath","setCurrentPath","location","useLocation","useEffect","pathname","to","defaultDesignerData","errorHandler","response","alert","error","DashboardHome","pageList","setPageList","setPageName","tableList","setTableList","setTableName","tableIsMaster","setTableIsMaster","designerColumns","setDesignerColumns","showTable","setShowTable","designerColumnData","setDesignerColumnData","crudColumns","setCrudColumns","dataType","maxLength","currentDatasetColumn","setCurrentDatasetColumn","columnList","setColumnList","setColumnName","tableTypeDisabled","setTableTypeDisabled","joinableColumns","setJoinableColumns","editingRow","setEditingRow","editingRowIndex","setEditingRowIndex","isNewEntry","setIsNewEntry","isLoading","setIsLoading","fetchTableList","argument","prev","getTables","then","res","catch","applyDesignerColumnResponse","columnsData","length","isNewPage","includes","crudCols","colList","c","err","cuCrudData","find","getJoinableColumnsByTableName","jonables","changeMultiInput","target","name","value","list","placeholder","disabled","onChange","p","defaultChecked","t","checked","htmlFor","d","nullConstrain","required","preventDefault","msg","desData","postData","postNewDesignerColumn","newDesData","style","overflowX","confirm","delete","deleteDesignerColumn","filter","_","idx","DatasetTable","defaultEditData","Datasets","datasets","setDatasets","currentTable","setCurrentTable","newTableData","setNewTableData","tableListLoading","setTableListLoading","datasetChanging","setDatasetChanging","creatingNewTable","setCreatingNewTable","creatingNewColumn","setCreatingNewColumn","editingIndex","setEditingIndex","onNewTableInput","tempDatasets","deleteDataset","Pages","pages","setPages","pagesLoading","setPagesLoading","currentPage","setCurrentPage","tables","setTables","tableLoading","setTableLoading","tableNames","push","App","height","maxHeight","overflowY","exact","path","element","store","createStore","reducerList","applyMiddleware","thunk","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.20574b52.chunk.js","sourcesContent":["const designerTable = (initial = [], action) => {\r\n    switch(action.type) {\r\n        default: return [];\r\n    }\r\n}\r\n\r\nexport default designerTable;","import { combineReducers } from \"redux\";\r\nimport designerTable from \"./designerTable\";\r\nexport default combineReducers({\r\n    designerTable\r\n})","// export const baseUrl = \"http://35.208.65.24:5000\";\r\nexport const baseUrl = \"http://localhost:5000\";\r\n\r\nexport const validCrudDataTypes = [\r\n    'STRING', 'NUMBER', 'BOOLEAN', 'DATE', \r\n    'TIME', 'DATETIME', 'FILE', 'IMAGE', \r\n    'DECIMAL', 'MONEY', 'VARCHAR', 'INT',\r\n    'TEXT', 'FLOAT', 'REAL', 'VARBINARY(MAX)'\r\n]\r\n\r\nexport const validDatasetTypes = [\r\n    'VARCHAR', 'INT', 'FLOAT', \r\n    'BOOLEAN', 'DATE', 'TIME', \r\n    'DATETIME', 'FILE', 'IMAGE', 'MONEY'\r\n];\r\n\r\nexport const validInputFieldTypes = [\r\n    'NUMBER', 'TEXT', 'EMAIL', \r\n    'PASSWORD', 'RADIO', 'CHECKBOX', \r\n    'DATE', 'TIME', 'DATETIME'\r\n];","import axios from \"axios\";\r\nimport { baseUrl } from \"./config.js\";\r\n\r\nexport const getDistinctPages = () => axios.get(baseUrl + \"/designer/pages\");\r\n\r\nexport const getTables = (pageName) => {\r\n    return pageName ? axios.get(baseUrl + '/designer/tables/' + pageName) \r\n    : axios.get(baseUrl + '/dataset/tables');\r\n} \r\n\r\nexport const getDesignerColumns = (pageName) => {\r\n    if(pageName) return axios.get(baseUrl + \"/designer/columns?pageName=\" + pageName);\r\n    else return axios.get(baseUrl + \"/designer/columns\");\r\n} \r\n\r\nexport const getDesignerColumnsByTableName = (tableName, pageName) => {\r\n    return pageName ? axios.get(baseUrl + '/designer/columns/' + tableName + '?pageName=' + pageName) \r\n    : axios.get(baseUrl + '/designer/columns/' + tableName);\r\n} \r\n\r\nexport const getDatasetTables = () => axios.get(baseUrl + '/dataset/tables');\r\nexport const getCrudColumnsByTableName = (tableName) => axios.get(baseUrl + '/dataset/columns/' + tableName);\r\n\r\nexport const getJoinableColumnsByTableName = (tableName) => axios.get(baseUrl + '/dataset/joinable/columns/' + tableName);\r\n\r\nexport const postNewCrudColumn = (data) => {\r\n    let formatted = formatCrudData(data)\r\n    console.log(formatted);\r\n    return axios.post(baseUrl + '/crud/column', formatted);\r\n}\r\n\r\nexport const postNewDataset = (data) => {\r\n    let formatted = formatPostDataset(data)\r\n    console.log(formatted);\r\n    return axios.post(baseUrl + '/dataset/column', formatted);\r\n}\r\n\r\nexport const editDataset = (id, data) => {\r\n    const temp = formatEditDataset(data); \r\n    return axios.patch(baseUrl + '/dataset/column/' + id, temp);\r\n} \r\n\r\nexport const deleteDataset = (id) => {\r\n    if(confirm(\"Confirm Delete Dataset with Id \"+id)) return axios.delete(baseUrl + '/dataset/column/' + id);\r\n    else return;\r\n}\r\n\r\n\r\nexport const postNewDesignerColumn = (desData, pageName, tableName, columnName, isMaster) => {\r\n    if(!desData.displayLength) delete desData.displayLength;\r\n    desData.isJoinColumn = desData.isJoinColumn ? 1 : 0;\r\n    desData.applyFilter = desData.applyFilter ? 1 : 0;\r\n    let postData = {...desData, pageName, tableName, columnName, isMaster: isMaster? 1 : 0};\r\n    return axios.post(baseUrl + '/designer/column', postData);\r\n}\r\n\r\nexport const editDesignerColumn = (id, data) => {\r\n    data.applyFilter = data.applyFilter ? 1 : 0;\r\n    data.isJoinColumn = data.isJoinColumn ? 1 : 0;\r\n    return axios.patch(baseUrl + '/designer/column/' + id, data);\r\n} \r\nexport const deleteDesignerColumn = (id) => {\r\n    if(confirm(\"Delete \"+id)) return axios.delete(baseUrl + '/designer/column/' + id);\r\n    else return; \r\n}\r\n\r\nexport const editCrudColumn = (id, data) => axios.patch(baseUrl + '/crud/column/' + id, data);\r\nexport const deleteCrudColumn = (id) => {\r\n    if(confirm(\"Delete \"+id)) return axios.delete(baseUrl + '/crud/column/' + id);\r\n    else return;\r\n}\r\n\r\n// utility\r\n\r\nfunction formatPostDataset (data) {\r\n    let temp = data;\r\n    Object.keys(data).forEach(k => {\r\n        if(!data[k]) delete temp[k];\r\n    });\r\n    temp.allowNull = temp.allowNull ? 1 : 0;\r\n    temp.keepUnique = temp.keepUnique ? 1 : 0;\r\n    return temp;\r\n}\r\n\r\nfunction formatEditDataset(data) {\r\n    delete data.id;\r\n    let temp = data;\r\n    Object.keys(data).forEach(k => {\r\n        if(!data[k]) delete temp[k];\r\n    });\r\n    temp.allowNull = temp.allowNull ? 1 : 0;\r\n    temp.keepUnique = temp.keepUnique ? 1 : 0;\r\n    return temp;\r\n}\r\n\r\nfunction removeEmptyFields (data) {\r\n    let temp = data;\r\n    Object.keys(data).forEach(k => {\r\n        if(!data[k]) delete temp[k];\r\n    })\r\n    return temp;\r\n}\r\n\r\nfunction formatCrudData(data) {\r\n    let type = data.dataType;\r\n    if(Object.keys(passableDataType).includes(type)){\r\n        type = passableDataType[type];\r\n    }\r\n    let nConstrain = data.nullConstrain ? 1 : 0;\r\n    delete data.id;\r\n    return {...data, dataType: type, nullConstrain: nConstrain}\r\n}\r\n\r\nconst passableDataType = {\r\n    VARCHAR: \"STRING\",\r\n    TEXT: \"STRING\",\r\n    INT: \"NUMBER\",\r\n    FLOAT: \"DECIMAL\",\r\n    REAL: \"DECIMAL\",\r\n    \"VARBINARY(MAX)\": \"FILE\"\r\n}","import { useState } from \"react\";\r\nexport default function DesignerTable({ rows, onRowEdit, onRowDelete, hideActions }) {\r\n\r\n\r\n    return (\r\n        <table className=\"table table-striped\">\r\n            <thead className=\"bg-dark text-white\">\r\n                <tr>\r\n                    <th scope=\"col\">Id</th>\r\n                    <th scope=\"col\">Page Name</th>\r\n                    <th scope=\"col\">Table Name</th>\r\n                    <th scope=\"col\">Column Name</th>\r\n                    <th scope=\"col\">Label</th>\r\n                    <th scope=\"col\">Apply Filter</th>\r\n                    <th scope=\"col\">Display Mode</th>\r\n                    <th scope=\"col\">Display Length</th>\r\n                    <th scope=\"col\">Table Type</th>\r\n                    <th scope=\"col\">Join Column</th>\r\n                    <th scope=\"col\">Reference Table</th>\r\n                    <th scope=\"col\">Reference Column</th>\r\n                    {\r\n                        hideActions ? <></> : <th scope=\"col\" className=\"bg-secondary\">Action</th>\r\n                    }\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    rows.map((r, i) => (\r\n                        <tr key={i}>\r\n                            <th scope=\"row\">{r.id}</th>\r\n                            <td>{r.pageName}</td>\r\n                            <td>{r.tableName}</td>\r\n                            <td>{r.columnName}</td>\r\n                            <td>{r.label}</td>\r\n                            <td>{r.applyFilter.toString()}</td>\r\n                            <td>{r.displayMode}</td>\r\n                            <td>{r.displayLength || 'Unspecified'}</td>\r\n                            <td>{r.isMaster ? 'Master' : 'Detail'}</td>\r\n                            <td>{r.isJoinColumn.toString()}</td>\r\n                            <td>{r.refTable || 'Not Applicable'}</td>\r\n                            <td>{r.refColumn || 'Not Applicable'}</td>\r\n                            {\r\n                                hideActions ? <></> :\r\n                                    <td>\r\n                                        <button className=\"btn btn-sm btn-warning mr-2\" onClick={(e) => { onRowEdit(e, i, r.id) }}>Edit</button>\r\n                                        <button className=\"btn btn-sm btn-danger\" onClick={(e) => { onRowDelete(e, i, r.id) }}>Delete</button>\r\n                                    </td>\r\n                            }\r\n                        </tr>\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport default function Sidebar() {\r\n\r\n    const [currentPath, setCurrentPath] = useState(\"/\");\r\n    const location = useLocation();\r\n    useEffect(() => {\r\n        setCurrentPath(location.pathname);\r\n    }, [location])\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column w-100 sidebar-hold\">\r\n            <Link to=\"/\" className={`navs ${currentPath === \"/\" ? 'active' : \"\" }`}>Home</Link>\r\n            <Link to=\"/pages\" className={`navs ${currentPath === \"/pages\" ? 'active' : \"\" }`}>Pages</Link>\r\n            <Link to=\"/datasets\" className={`navs ${currentPath === \"/datasets\" ? 'active' : \"\" }`}>Datasets</Link>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport DesignerTable from '../component/DesignerTable.jsx';\r\nimport { \r\n    getDesignerColumnsByTableName, getCrudColumnsByTableName, \r\n    getDistinctPages, getTables, postNewCrudColumn, postNewDesignerColumn, editDesignerColumn, deleteDesignerColumn, getJoinableColumnsByTableName \r\n} from \"../api.js\";\r\nimport { validCrudDataTypes, validInputFieldTypes } from \"../config.js\";\r\n\r\nconst defaultDesignerData = {\r\n    label: \"\", displayMode: \"TEXT\", isJoinColumn: false,\r\n    displayLength: \"\", applyFilter: false, refTable: \"\",\r\n    refColumn: \"\"\r\n}\r\n\r\nfunction errorHandler ({response}) {\r\n    console.log(response);\r\n    if(response.data.type){\r\n        alert(`${response.data?.type} : ${response.data?.error}`);\r\n    }\r\n    else {\r\n        alert(\"An Error Occured\")\r\n    }\r\n}\r\n\r\nexport default function DashboardHome() {\r\n\r\n    const [pageList, setPageList] = useState([]);\r\n    const [pageName, setPageName] = useState(\"\");\r\n\r\n    const [tableList, setTableList] = useState([]);\r\n    const [tableName, setTableName] = useState(\"\");\r\n    const [tableIsMaster, setTableIsMaster] = useState(true);\r\n\r\n    const [designerColumns, setDesignerColumns] = useState([]);\r\n    const [showTable, setShowTable] = useState(false);\r\n    const [designerColumnData, setDesignerColumnData] = useState(defaultDesignerData)\r\n    const [crudColumns, setCrudColumns] = useState([]);\r\n    const [currentDatasetColumn, setCurrentDatasetColumn] = useState({\r\n        columnName: \"\", dataType: \"STRING\", tableName: \"\",\r\n        maxLength: \"\", allowNull: false, keepUnique: false\r\n    });\r\n    const [columnList, setColumnList] = useState([]);\r\n    const [columnName, setColumnName] = useState(\"\");\r\n\r\n    const [tableTypeDisabled, setTableTypeDisabled] = useState(true);\r\n    const [joinableColumns, setJoinableColumns] = useState([]);\r\n\r\n    const [editingRow, setEditingRow] = useState(false);\r\n    const [editingRowIndex, setEditingRowIndex] = useState(\"\");\r\n    const [isNewEntry, setIsNewEntry] = useState({ pageName: false, tableName: false, columnName: false });\r\n    const [isLoading, setIsLoading] = useState({ pageName: false, tableName: true, columnName: true });\r\n\r\n    const fetchTableList = (argument) => {\r\n        setIsLoading(prev => ({ ...prev, tableName: true }))\r\n        getTables(argument).then(res => {\r\n            setTableList(res.data.data);\r\n            setIsLoading(prev => ({ ...prev, tableName: false }))\r\n        }).catch(errorHandler)\r\n    }\r\n\r\n    const applyDesignerColumnResponse = (res) => {\r\n        const columnsData = res.data.data;\r\n        setDesignerColumns(columnsData);\r\n        setShowTable(true);\r\n        if (columnsData.length) {\r\n            setTableIsMaster(columnsData[0].isMaster);\r\n            if(columnsData[0].pageName === pageName) setTableTypeDisabled(true);\r\n            else setTableTypeDisabled(false);\r\n        } else {\r\n            setTableTypeDisabled(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let isNewPage = pageName && !pageList.includes(pageName);\r\n        setIsNewEntry(prev => (\r\n            { ...prev, pageName: isNewPage }\r\n        ));\r\n        if(isNewPage) setShowTable(false);\r\n        else {\r\n            setShowTable(true);\r\n            if(designerColumns[0]?.pageName === pageName) setTableTypeDisabled(true);\r\n            else setTableTypeDisabled(false);\r\n        }\r\n    }, [pageName]);\r\n\r\n    useEffect(() => {\r\n        if(!tableName) return;\r\n        getDesignerColumnsByTableName(tableName).then(applyDesignerColumnResponse).catch(errorHandler)\r\n        \r\n        setIsLoading(prev => ({ ...prev, columnName: true }));\r\n        getCrudColumnsByTableName(tableName).then(res => {\r\n            const crudCols = res.data.data;\r\n            const colList = crudCols.map(c => c.columnName);\r\n            setColumnList(colList);\r\n            setCrudColumns(crudCols);\r\n            setIsLoading(prev => ({ ...prev, columnName: false }))\r\n        }).catch(err => {\r\n            errorHandler(err)\r\n            setIsLoading(prev => ({ ...prev, columnName: false }))\r\n        })\r\n    }, [tableName])\r\n\r\n    useEffect(() => {\r\n        if(!columnName) return;\r\n        // setIsNewEntry(prev => (\r\n        //     { ...prev, [fieldName]: value && !columnList.includes(value) }\r\n        // ));\r\n        const cuCrudData = crudColumns.find(c => c.columnName === columnName);\r\n        setCurrentDatasetColumn(cuCrudData);\r\n    }, [columnName])\r\n\r\n    useEffect(() => {\r\n        if(!designerColumnData.isJoinColumn) {\r\n            setDesignerColumnData(prev => ({\r\n                ...prev,\r\n                refColumn: \"\",\r\n                refTable: \"\"\r\n            }))\r\n        }\r\n    }, [designerColumnData.isJoinColumn])\r\n\r\n    useEffect(() => {\r\n        if(!designerColumnData.refTable) return;\r\n        getJoinableColumnsByTableName(designerColumnData.refTable).then(res => {\r\n            const jonables = res.data.data;\r\n            setJoinableColumns(jonables)\r\n        }).catch(errorHandler)\r\n    }, [designerColumnData.refTable])\r\n\r\n    const changeMultiInput = (e) => {\r\n        switch (e.target.name) {\r\n            case 'pageName': setPageName(e.target.value); break;\r\n            case 'tableName': setTableName(e.target.value); break;\r\n            case 'columnName': {\r\n                setColumnName(e.target.value);\r\n                setCurrentDatasetColumn(prev => ({ ...prev, columnName: e.target.value }));\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    // const createCrudColumn = () => {\r\n    //     postNewCrudColumn({ ...currentDatasetColumn, tableName }).then(res => {\r\n    //         const newCrudColumn = res.data.data;\r\n    //         setCrudColumns(prev => [...prev, newCrudColumn]);\r\n    //         setColumnList(prev => [...prev, newCrudColumn.columnName]);\r\n    //         alert(\"New Crud Column Inserted\");\r\n    //     }).catch(errorHandler)\r\n    // }\r\n\r\n    const handleDesignerDataForm = (e) => {\r\n        e.preventDefault();\r\n        if(!editingRow) {\r\n            postNewDesignerColumn(designerColumnData, pageName, tableName, columnName, tableIsMaster)\r\n            .then(res => {\r\n                const newDesData = res.data.data;\r\n                setDesignerColumns(prev => [...prev, newDesData]);\r\n                alert(\"Data Inserted\");\r\n            }).catch(errorHandler)\r\n        } else {\r\n            editDesignerColumn(designerColumns[editingRowIndex].id, {\r\n                ...designerColumnData, columnName\r\n            }).then(res => {\r\n                getDesignerColumnsByTableName(tableName).then(applyDesignerColumnResponse).catch(errorHandler);\r\n                alert(res.data.msg)\r\n            }).catch(errorHandler)\r\n        }\r\n    }\r\n\r\n    const handleDesignerFormCancel = () => {\r\n        setDesignerColumnData(defaultDesignerData);\r\n        setEditingRow(false);\r\n        setColumnName(\"\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsLoading(prev => ({ ...prev, pageName: true }))\r\n        getDistinctPages().then(response => {\r\n            setPageList(response.data.data)\r\n            setIsLoading(prev => ({ ...prev, pageName: false }))\r\n        }).catch(err => {\r\n            errorHandler(err);\r\n            setIsLoading(prev => ({ ...prev, pageName: false }))\r\n        });\r\n\r\n        fetchTableList();\r\n    }, []);\r\n\r\n    const onRowEdit = (e, i, id) => {\r\n        setEditingRow(true);\r\n        const data = designerColumns[i];\r\n        setEditingRowIndex(i);\r\n        setColumnName(data.columnName);\r\n        setDesignerColumnData(prev => ({\r\n            ...prev,\r\n            label: data.label,\r\n            displayLength: data.displayLength,\r\n            displayMode: data.displayMode,\r\n            isJoinColumn: data.isJoinColumn,\r\n            applyFilter: data.applyFilter,\r\n            refColumn: data.refColumn,\r\n            refTable: data.refTable\r\n        }));\r\n    }\r\n\r\n    const onRowDelete = (e, i, id) => {\r\n        deleteDesignerColumn(id).then(res => {\r\n            let temp = designerColumns.filter((_, idx) => idx !== i);\r\n            setDesignerColumns(temp);\r\n        }).catch(errorHandler)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid py-4\">\r\n            <div className=\"col-12\">\r\n                <h3 className=\"fw-500\">Automation System</h3>\r\n            </div>\r\n            <hr />\r\n            <div className=\"d-flex flex-wrap rg-1\">\r\n                <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                    <div className={`w-100 multi-input-hold ${isNewEntry.pageName ? 'new' : ''}`}>\r\n                        <label>Page Name</label>\r\n                        <input type=\"text\" name=\"pageName\" list=\"pageList\" placeholder=\"Choose/Enter Page Name\" disabled={isLoading.pageName}\r\n                            className=\"form-control\" value={pageName} onChange={changeMultiInput}\r\n                        />\r\n                        <datalist id=\"pageList\">\r\n                            {pageList.map((p, i) => (<option key={i} value={p} />))}\r\n                        </datalist>\r\n                    </div>\r\n                    <label className='pt-2 pl-1'>This is a New Page</label>\r\n                </div>\r\n\r\n                <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                    <div className={`w-100 multi-input-hold ${isNewEntry.tableName ? 'new' : ''}`}>\r\n                        <label>Table Name</label>\r\n                        <select name=\"tableName\" disabled={isLoading.tableName}\r\n                            className='form-control' value={tableName} onChange={changeMultiInput}\r\n                        >\r\n                            <option value=\"\" defaultChecked>Select Table</option>\r\n                            {tableList.map((t, i) => (<option key={i} value={t}>{t}</option>))}\r\n                        </select>\r\n                        {/* <input type=\"text\" name=\"tableName\" list=\"tableList\" placeholder=\"Choose/Enter Table Name\" disabled={isLoading.tableName}\r\n                            className=\"form-control\" onKeyUp={checkNewEntry} value={tableName} onChange={changeMultiInput}\r\n                        />\r\n                        <datalist id=\"tableList\">\r\n                            {tableList.map((t, i) => (<option key={i} value={t} />))}\r\n                        </datalist> */}\r\n                    </div>\r\n                    <label>This is a New Table</label>\r\n                </div>\r\n\r\n                <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                    <label>Table Type</label>\r\n                    <div className=\"d-flex cg-1\">\r\n                        <div className=\"form-check\">\r\n                            <input type=\"radio\" name=\"isMaster\" value=\"1\" checked={tableIsMaster} disabled={tableTypeDisabled}\r\n                                className=\"form-check-input\" id=\"imt\" onChange={() => { setTableIsMaster(true)}} />\r\n                            <label htmlFor=\"imt\" className=\"form-check-label\">Master</label>\r\n                        </div>\r\n                        <div className=\"form-check\">\r\n                            <input type=\"radio\" name=\"isMaster\" value=\"0\" checked={!tableIsMaster} disabled={tableTypeDisabled}\r\n                                className=\"form-check-input\" id=\"imf\" onChange={() => { setTableIsMaster(false)}} />\r\n                            <label htmlFor=\"imf\" className=\"form-check-label\">Detail</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                    <div>\r\n                        <button className=\"mt-auto btn btn-primary\" onClick={() => {\r\n                            if(columnList.length) setColumnName(columnList[0]);\r\n                        }}>Add A Column</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n\r\n            <div className={`border p-2 ${columnName || editingRow ? '' : 'hide'}`}>\r\n                <h6>Dataset Info</h6>\r\n                <div className=\"d-flex flex-wrap rg-1\">\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6\">\r\n                        <div className={`w-100 multi-input-hold ${isNewEntry.columnName ? 'new' : ''}`}>\r\n                            <label>Column Name</label>\r\n                            <select name=\"columnName\" value={columnName} className='form-control' onChange={changeMultiInput} disabled={isLoading.columnName}>\r\n                                <option value=\"\" defaultChecked>Select Column</option>\r\n                                {columnList.map((c, i) => (<option key={i} value={c}>{c}</option>))}\r\n                            </select>\r\n                            {/* <input type=\"text\" name=\"columnName\" list=\"columnList\" placeholder=\"Choose/Enter Column Name\" disabled={isLoading.columnName}\r\n                                className=\"form-control\" onKeyUp={checkNewEntry} value={columnName} onChange={changeMultiInput}\r\n                            />\r\n                            <datalist id=\"columnList\" >\r\n                                {columnList.map((c, i) => (<option key={i} value={c} />))}\r\n                            </datalist> */}\r\n                        </div>\r\n                        <label>This is new Column</label>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6\">\r\n                        <label>Data Type</label>\r\n                        <select name=\"dataType\" className=\"form-control\" value={currentDatasetColumn.dataType} disabled={!isNewEntry.columnName}\r\n                            onChange={(e) => { setCurrentDatasetColumn(prev => ({ ...prev, dataType: e.target.value })) }}>\r\n                            {\r\n                                validCrudDataTypes.map((d, i) => <option value={d} key={i}>{d}</option>)\r\n                            }\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6\">\r\n                        <label>Data Length</label>\r\n                        <input type=\"number\" name=\"dataLength\" className=\"form-control\" value={currentDatasetColumn.maxLength} disabled={!isNewEntry.columnName}\r\n                            onChange={(e) => { setCurrentDatasetColumn(prev => ({ ...prev, maxLength: e.target.value })) }}\r\n                            placeholder=\"Data Length\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6\">\r\n                        <label>Allow Null Values</label>\r\n                        <div className=\"d-flex cg-1\">\r\n                            <div className=\"form-check\">\r\n                                <input type=\"radio\" name=\"allowNull\" id=\"ant\" className=\"form-check-input\" checked={currentDatasetColumn.allowNull}\r\n                                    disabled={!isNewEntry.columnName} onChange={() => { setCurrentDatasetColumn(prev => ({ ...prev, nullConstrain: true })) }} />\r\n                                <label htmlFor=\"ant\" className=\"form-check-label\">Yes</label>\r\n                            </div>\r\n                            <div className=\"form-check\">\r\n                                <input type=\"radio\" name=\"allowNull\" id=\"anf\" className=\"form-check-input\" checked={!currentDatasetColumn.allowNull}\r\n                                    disabled={!isNewEntry.columnName} onChange={() => { setCurrentDatasetColumn(prev => ({ ...prev, nullConstrain: false })) }} />\r\n                                <label htmlFor=\"anf\" className=\"form-check-label\">No</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6\">\r\n                        <label>Keep Values Unique</label>\r\n                        <div className=\"d-flex cg-1\">\r\n                            <div className=\"form-check\">\r\n                                <input type=\"radio\" name=\"keepUnique\" id=\"kut\" className=\"form-check-input\" checked={currentDatasetColumn.keepUnique}\r\n                                    disabled={!isNewEntry.columnName} onChange={() => { setCurrentDatasetColumn(prev => ({ ...prev, keepUnique: true })) }} />\r\n                                <label htmlFor=\"kut\" className=\"form-check-label\">Yes</label>\r\n                            </div>\r\n                            <div className=\"form-check\">\r\n                                <input type=\"radio\" name=\"keepUnique\" id=\"kuf\" className=\"form-check-input\" checked={!currentDatasetColumn.keepUnique}\r\n                                    disabled={!isNewEntry.columnName} onChange={() => { setCurrentDatasetColumn(prev => ({ ...prev, keepUnique: false })) }} />\r\n                                <label htmlFor=\"kuf\" className=\"form-check-label\">No</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"col-12 d-flex py-2\">\r\n                    <button className={`btn btn-primary ml-auto ${isNewEntry.columnName ? '' : 'hide'}`}\r\n                        onClick={createCrudColumn}\r\n                    >Add Column</button>\r\n                </div> */}\r\n            </div>\r\n            <br />\r\n\r\n            <div className={`border p-2 ${columnName || editingRow ? '' : 'hide'}`}>\r\n                <h6>{editingRow ? 'Edit' : 'Fill' } Data</h6>\r\n                <div className=\"d-flex w-100 flex-wrap rg-1\">\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                        <label>Label</label>\r\n                        <input type=\"text\" required name=\"label\" className=\"form-control\" value={designerColumnData.label}\r\n                            onChange={(e) => { setDesignerColumnData(prev => ({ ...prev, label: e.target.value })) }}\r\n                            placeholder=\"Label\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                        <label>Display Mode</label>\r\n                        <select name=\"displayMode\" className=\"form-control\" value={designerColumnData.displayMode}\r\n                            onChange={(e) => { setDesignerColumnData(prev => ({ ...prev, displayMode: e.target.value })) }}>\r\n                                <option value=\"\" defaultChecked>Select Mode</option>\r\n                            {\r\n                                validInputFieldTypes.map((t, i) => <option value={t} key={i}>{t}</option>)\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                        <label>Display Length</label>\r\n                        <input type=\"number\" name=\"displayLength\" className=\"form-control\" value={designerColumnData.displayLength}\r\n                            onChange={(e) => { setDesignerColumnData(prev => ({ ...prev, displayLength: e.target.value })) }}\r\n                            placeholder=\"Display Length\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                        <label>Apply Filter</label>\r\n                        <div className=\"d-flex cg-1\">\r\n                            <div className=\"form-check\">\r\n                                <input type=\"radio\" name=\"applyFilter\" id=\"aft\" className=\"form-check-input\" checked={designerColumnData.applyFilter}\r\n                                    onChange={() => { setDesignerColumnData(prev => ({ ...prev, applyFilter: true })) }} />\r\n                                <label htmlFor=\"aft\" className=\"form-check-label\">True</label>\r\n                            </div>\r\n                            <div className=\"form-check\">\r\n                                <input type=\"radio\" name=\"applyFilter\" id=\"aff\" className=\"form-check-input\" checked={!designerColumnData.applyFilter}\r\n                                    onChange={() => { setDesignerColumnData(prev => ({ ...prev, applyFilter: false })) }} />\r\n                                <label htmlFor=\"aff\" className=\"form-check-label\">False</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {\r\n                        tableIsMaster ? <></> :\r\n                            <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                                <label>This is a Join Column</label>\r\n                                <div className=\"d-flex cg-1\">\r\n                                    <div className=\"form-check\">\r\n                                        <input type=\"radio\" name=\"isJoinColumn\" id=\"ijct\" className=\"form-check-input\"\r\n                                            checked={designerColumnData.isJoinColumn}\r\n                                            onChange={() => { setDesignerColumnData(prev => ({ ...prev, isJoinColumn: true })) }}\r\n                                        />\r\n                                        <label htmlFor=\"ijct\" className=\"form-check-label\">Yes</label>\r\n                                    </div>\r\n                                    <div className=\"form-check\">\r\n                                        <input type=\"radio\" name=\"isJoinColumn\" id=\"ijcf\" className=\"form-check-input\"\r\n                                            checked={!designerColumnData.isJoinColumn}\r\n                                            onChange={() => { setDesignerColumnData(prev => ({ ...prev, isJoinColumn: false })) }}\r\n                                        />\r\n                                        <label htmlFor=\"ijcf\" className=\"form-check-label\">No</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    }\r\n\r\n                    {\r\n                        designerColumnData.isJoinColumn ? <>\r\n                            <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                                <label className='form-label'>Reference Table</label>\r\n                                <select name=\"refTable\" className='form-control'\r\n                                    value={designerColumnData.refTable} \r\n                                    onChange={(e) => { setDesignerColumnData(prev => ({...prev, refTable: e.target.value})) }}\r\n                                >\r\n                                    <option value=\"\" defaultChecked>Select Table</option>\r\n                                    {\r\n                                        tableList.map((t, i) => <option key={i} value={t}>{t}</option>)\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                                <label className='form-label'>Reference Column</label>\r\n                                <select name=\"refColumn\" className='form-control'\r\n                                    value={designerColumnData.refColumn} \r\n                                    onChange={(e) => { setDesignerColumnData(prev => ({...prev, refColumn: e.target.value})) }}\r\n                                >\r\n                                    <option value=\"\" defaultChecked>Select Column</option>\r\n                                    {\r\n                                        joinableColumns.map((t, i) => <option key={i} value={t}>{t}</option>)\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                        </> : <></>\r\n                    }\r\n                    <div className=\"col d-flex\">\r\n                        <div className='d-flex mt-auto cg-1 rg-1 pb-1'>\r\n                            <button className=\"btn btn-sm btn-success\" onClick={handleDesignerDataForm}>Submit</button>\r\n                            <button className=\"btn btn-sm btn-info\" onClick={handleDesignerFormCancel} >Cancel</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            {\r\n                isLoading.columnName ? <div className=\"d-flex justify-content-center py-2\">\r\n                    <div className=\"loader\"></div>\r\n                </div> : <></>\r\n            }\r\n            {\r\n                showTable ? \r\n                <div style={{ overflowX: 'scroll' }}>\r\n                    {designerColumns.length ? <DesignerTable rows={designerColumns} onRowDelete={onRowDelete} onRowEdit={onRowEdit} /> : <div className='text-danger text-center'>No Data to Show</div>}\r\n                </div> : <></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function DatasetTable({ rows, onRowDelete, onRowEdit }) {\r\n\r\n    return (\r\n        <table className=\"table table-striped\">\r\n            <thead className=\"bg-dark text-white\">\r\n                <tr>\r\n                    <th scope=\"col\">Id</th>\r\n                    <th scope=\"col\">Table Name</th>\r\n                    <th scope=\"col\">Column Name</th>\r\n                    <th scope=\"col\">Data Type</th>\r\n                    <th scope=\"col\">Max Length</th>\r\n                    <th scope=\"col\">Allow Null</th>\r\n                    <th scope=\"col\" className='w-fc'>Keep Unique</th>\r\n                    {/* <th scope='col'>Master/Detail</th>\r\n                    <th scope=\"col\">Join Column</th>\r\n                    <th scope=\"col\">Reference Table</th>\r\n                    <th scope=\"col\">Reference Column</th> */}\r\n                    <th scope=\"col\" className=\"bg-secondary\">Action</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    rows.map((r, i) => (\r\n                        <tr key={i}>\r\n                            <th scope=\"row\">{r.id}</th>\r\n                            <td>{r.tableName}</td>\r\n                            <td>{r.columnName}</td>\r\n                            <td>{r.dataType}</td>\r\n                            <td>{r.maxLength || 'Unspecified'}</td>\r\n                            <td>{r.allowNull.toString()}</td>\r\n                            <td>{r.keepUnique.toString()}</td>\r\n                            {/* <td>{r.isMaster? 'Master' : 'Detail'}</td>\r\n                            <td>{r.isJoinColumn.toString()}</td>\r\n                            <td>{r.refTable || 'Not Applicable'}</td>\r\n                            <td>{r.refColumn || 'Not Applicable'}</td> */}\r\n                            <td>\r\n                                <button className=\"btn btn-sm btn-warning mr-2\" onClick={(e) => { onRowEdit(e, i, r.id) }}>Edit</button>\r\n                                <button className=\"btn btn-sm btn-danger\" onClick={(e) => { onRowDelete(e, i, r.id) }}>Delete</button>\r\n                            </td>\r\n                        </tr>\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { deleteDataset, editDataset, getCrudColumnsByTableName, getDatasetTables, postNewDataset } from '../api';\r\nimport DatasetTable from '../component/DatasetTable';\r\nimport { validDatasetTypes } from '../config';\r\n\r\nconst defaultEditData = {\r\n    tableName: \"\", columnName: \"\", dataType: \"VARCHAR\", maxLength: \"\", allowNull: true,\r\n    keepUnique: false, \r\n    // isMaster: true, isJoinColumn: false, refTable: \"\", refColumn: \"\"\r\n}\r\n\r\nfunction errorHandler ({response}) {\r\n    console.log(response);\r\n    if(response.data.type){\r\n        alert(`${response.data?.type} : ${response.data?.error}`);\r\n    }\r\n    else {\r\n        alert(\"An Error Occured\")\r\n    }\r\n}\r\n\r\nexport default function Datasets() {\r\n\r\n    const [tableList, setTableList] = useState([]);\r\n    const [datasets, setDatasets] = useState([]);\r\n    const [currentTable, setCurrentTable] = useState(\"\");\r\n    const [newTableData, setNewTableData] = useState(defaultEditData);\r\n    const [tableListLoading, setTableListLoading] = useState(true);\r\n    const [datasetChanging, setDatasetChanging] = useState(false);\r\n\r\n    const [creatingNewTable, setCreatingNewTable] = useState(false);\r\n    const [creatingNewColumn, setCreatingNewColumn] = useState(false);\r\n    const [editingRow, setEditingRow] = useState(false);\r\n\r\n    const [editingIndex, setEditingIndex] = useState(null);\r\n\r\n    const onNewTableInput = (e) => {\r\n        setNewTableData(prev => ({ ...prev, [e.target.name]: e.target.value }));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDatasetTables().then(res => {\r\n            setTableList(res.data.data)\r\n            setTableListLoading(false);\r\n        }).catch(errorHandler)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!currentTable) return;\r\n        setDatasetChanging(true)\r\n        if(creatingNewColumn) setNewTableData(prev => ({...prev, tableName: currentTable}));\r\n        getCrudColumnsByTableName(currentTable).then(res => {\r\n            setDatasets(res.data.data);\r\n            setDatasetChanging(false);\r\n        }).catch(errorHandler)\r\n    }, [currentTable]);\r\n\r\n    const onRowEdit = (e, i, id) => {\r\n        setEditingRow(true);\r\n        setEditingIndex(i);\r\n        setNewTableData({\r\n            tableName: datasets[i].tableName, columnName: datasets[i].columnName, dataType: datasets[i].dataType, \r\n            maxLength: datasets[i].maxLength, allowNull: datasets[i].allowNull, keepUnique: datasets[i].keepUnique\r\n        });\r\n    }\r\n\r\n    const onRowDelete = (e, i, id) => {\r\n        console.log(\"index \",i);\r\n        deleteDataset(id).then(res => { \r\n            alert(\"Data Deleted\");\r\n            let tempDatasets = datasets.filter((_, idx) => idx !== i);\r\n            setDatasets(tempDatasets);\r\n        }).catch(errorHandler)\r\n    }\r\n\r\n    const onFillUpSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(creatingNewTable) {\r\n            postNewDataset(newTableData).then(res => {\r\n                const data = res.data.data;\r\n                setTableList(prev => [...prev, data.tableName]);\r\n                setCurrentTable(data.tableName)\r\n                alert(\"New Table Created\");\r\n                setCreatingNewTable(false);\r\n            }).catch(errorHandler)\r\n        }\r\n        else if(creatingNewColumn) {\r\n            postNewDataset(newTableData).then(res => {\r\n                const data = res.data.data;\r\n                setDatasets(prev => [...prev, data]);\r\n                alert(\"New Column Inserted\");\r\n                setCreatingNewColumn(false);\r\n            }).catch(errorHandler)\r\n        }\r\n        else if(editingRow) {\r\n            editDataset(datasets[editingIndex].id, newTableData).then(res => {\r\n                const data = res.data.data;\r\n                let tempDatasets = datasets;\r\n                tempDatasets[editingIndex] = data;\r\n                setDatasets(tempDatasets);\r\n                alert(\"Data Updated\");\r\n                setEditingRow(false);\r\n            }).catch(errorHandler)\r\n        }\r\n    }\r\n\r\n    const onFillUpCancel = () => {\r\n        setEditingRow(false); setCreatingNewColumn(false); \r\n        setCreatingNewTable(false);\r\n        setNewTableData(defaultEditData);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid py-3\">\r\n            <div>\r\n                <h3>Dataset Tables</h3>\r\n            </div>\r\n            <hr />\r\n\r\n            <div className='d-flex justify-content-between pb-2'>\r\n                <h6>Dataset List</h6>\r\n                <button className=\"btn btn-sm btn-primary\"\r\n                    onClick={() => { \r\n                        setCreatingNewTable(true); \r\n                        setCreatingNewColumn(false); \r\n                        setEditingRow(false);\r\n                        setNewTableData(prev => ({ ...prev, tableName: \"\" })) \r\n                    }}\r\n                >Create New Table</button>\r\n            </div>\r\n            <div className='d-flex cg-1'>\r\n                {\r\n                    tableListLoading ? <div className=\"loader-sm\"></div> : <></>\r\n                }\r\n                {\r\n                    tableList.length  ?\r\n                        tableList.map((t, i) => <button key={i} className={`btn btn-sm btn-${t === currentTable ? 'dark' : 'success'}`} onClick={() => { setCurrentTable(t) }} >{t}</button>) :\r\n                        <div className=\"text-danger\">No Tables</div>\r\n                }\r\n            </div>\r\n            <br />\r\n\r\n            {\r\n                (creatingNewTable || creatingNewColumn || editingRow) ?\r\n                    <div className='border p-2'>\r\n                        <h6>{editingRow? 'Edit' : 'Fill'} Details</h6>\r\n                        <div className=\"d-flex flex-wrap rg-1 py-2\">\r\n\r\n                            {\r\n                                editingRow ? <></> :\r\n                                    <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                                        <label className='form-label'>Table Name</label>\r\n                                        {\r\n                                            creatingNewTable ? (\r\n                                                <input className='form-control' type=\"text\" name=\"tableName\"\r\n                                                    value={newTableData.tableName} onChange={onNewTableInput} placeholder=\"No whitespaces\"\r\n                                                />\r\n                                            ) : (\r\n                                                <select className='form-control' name='tableName' value={newTableData.tableName}\r\n                                                    onChange={onNewTableInput}\r\n                                                >\r\n                                                    {tableList.map((t, i) => <option key={i} value={t}>{t}</option>)}\r\n                                                </select>\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                            }\r\n\r\n\r\n                            <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                                <label className='form-label'>Column Name</label>\r\n                                <input className='form-control' type=\"text\" name=\"columnName\"\r\n                                    value={newTableData.columnName} onChange={onNewTableInput} placeholder=\"No whitespaces\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                                <label className=\"form-label\">Data Type</label>\r\n                                <select name=\"dataType\" className='form-control' value={newTableData.dataType} onChange={onNewTableInput}>\r\n                                    {\r\n                                        validDatasetTypes.map((t, i) => <option key={i} value={t}>{t}</option>)\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                                <label className=\"form-label\">Max Length</label>\r\n                                <input className='form-control' type=\"text\" name=\"maxLength\"\r\n                                    value={newTableData.maxLength} onChange={onNewTableInput} placeholder=\"Number\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                                <label>Allow Null Values</label>\r\n                                <div className=\"d-flex cg-1\">\r\n                                    <div className=\"form-check\">\r\n                                        <input type=\"radio\" name=\"allowNull\" id=\"ant\" className=\"form-check-input\" checked={newTableData.allowNull}\r\n                                            onChange={() => { setNewTableData(prev => ({ ...prev, allowNull: true })) }} />\r\n                                        <label htmlFor=\"ant\" className=\"form-check-label\">Yes</label>\r\n                                    </div>\r\n                                    <div className=\"form-check\">\r\n                                        <input type=\"radio\" name=\"allowNull\" id=\"anf\" className=\"form-check-input\" checked={!newTableData.allowNull}\r\n                                            onChange={() => { setNewTableData(prev => ({ ...prev, allowNull: false })) }} />\r\n                                        <label htmlFor=\"anf\" className=\"form-check-label\">No</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                                <label>Keep Values Unique</label>\r\n                                <div className=\"d-flex cg-1\">\r\n                                    <div className=\"form-check\">\r\n                                        <input type=\"radio\" name=\"keepUnique\" id=\"kut\" className=\"form-check-input\" checked={newTableData.keepUnique}\r\n                                            onChange={() => { setNewTableData(prev => ({ ...prev, keepUnique: true })) }} />\r\n                                        <label htmlFor=\"kut\" className=\"form-check-label\">Yes</label>\r\n                                    </div>\r\n                                    <div className=\"form-check\">\r\n                                        <input type=\"radio\" name=\"keepUnique\" id=\"kuf\" className=\"form-check-input\" checked={!newTableData.keepUnique}\r\n                                            onChange={() => { setNewTableData(prev => ({ ...prev, keepUnique: false })) }} />\r\n                                        <label htmlFor=\"kuf\" className=\"form-check-label\">No</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col py-2\">\r\n                                <button className=\"btn m-1 btn-sm btn-warning\" onClick={onFillUpSubmit} >Submit</button>\r\n                                <button className=\"btn m-1 btn-sm btn-info\" onClick={onFillUpCancel} >Cancel</button>\r\n                            </div>\r\n\r\n                            {/* <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                        <label>This is a Join Column</label>\r\n                        <div className=\"d-flex cg-1\">\r\n                            <div className=\"form-check\">\r\n                                <input type=\"radio\" name=\"isJoinColumn\" id=\"ijct\" className=\"form-check-input\" checked={newTableData.isJoinColumn}\r\n                                    onChange={() => { setNewTableData(prev => ({ ...prev, isJoinColumn: true })) }} />\r\n                                <label htmlFor=\"ijct\" className=\"form-check-label\">Yes</label>\r\n                            </div>\r\n                            <div className=\"form-check\">\r\n                                <input type=\"radio\" name=\"isJoinColumn\" id=\"ijcf\" className=\"form-check-input\" checked={!newTableData.isJoinColumn}\r\n                                    onChange={() => { setNewTableData(prev => ({ ...prev, isJoinColumn: false })) }} />\r\n                                <label htmlFor=\"ijcf\" className=\"form-check-label\">No</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                        <label className='form-label'>Reference Table</label>\r\n                        <select name=\"refTable\" className='form-control' value={newTableData.refTable} onChange={onNewTableInput}>\r\n                            {\r\n                                validDatasetTypes.map((t, i) => <option key={i} value={t}>{t}</option>)\r\n                            }\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-4 col-xl-3 col-md-6 col-12\">\r\n                        <label className='form-label'>Reference Column</label>\r\n                        <select name=\"refColumn\" className='form-control' value={newTableData.refColumn} onChange={onNewTableInput}>\r\n                            {\r\n                                validDatasetTypes.map((t, i) => <option key={i} value={t}>{t}</option>)\r\n                            }\r\n                        </select>\r\n                    </div> */}\r\n                        </div>\r\n                    </div> : <></>\r\n\r\n            }\r\n\r\n            <br />\r\n            {\r\n                datasets.length ? (\r\n                    <>\r\n                    <div className='d-flex align-items-center justify-content-between'>\r\n                        <span>Data of Table <strong>{currentTable}</strong></span>\r\n                        <button className=\"btn btn-success\" \r\n                            onClick={() => { \r\n                                setCreatingNewColumn(true); \r\n                                setNewTableData(prev => ({...defaultEditData, tableName: currentTable}));\r\n                                setCreatingNewTable(false);\r\n                                setEditingRow(false);\r\n                            }}\r\n                        >Add A Column</button>\r\n                    </div>\r\n                    <hr />\r\n                    <div className='d-flex pb-4 justify-content-center'>\r\n                        {\r\n                            datasetChanging ? <div className=\"py-3 loader\"></div> : <></> \r\n                        }\r\n                    </div>\r\n                    <div style={{ overflowX: 'scroll' }}>\r\n                        <DatasetTable rows={datasets} onRowDelete={onRowDelete} onRowEdit={onRowEdit} />\r\n                    </div>\r\n                    </>\r\n                ) : <></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getDesignerColumns, getDesignerColumnsByTableName, getDistinctPages, getTables } from '../api';\r\nimport DesignerTable from '../component/DesignerTable';\r\n\r\nfunction errorHandler({ response }) {\r\n  console.log(response);\r\n  if (response.data.type) {\r\n    alert(`${response.data?.type} : ${response.data?.error}`);\r\n  }\r\n  else {\r\n    alert(\"An Error Occured\")\r\n  }\r\n}\r\n\r\nexport default function Pages() {\r\n\r\n  const [pages, setPages] = useState([]);\r\n  const [pagesLoading, setPagesLoading] = useState(true);\r\n  const [currentPage, setCurrentPage] = useState(\"\");\r\n\r\n  const [tables, setTables] = useState([]);\r\n  const [currentTable, setCurrentTable] = useState(\"\");\r\n\r\n  const [tableLoading, setTableLoading] = useState(false);\r\n  const [designerColumns, setDesignerColumns] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!currentPage) return;\r\n    getDesignerColumns(currentPage).then(res => {\r\n      let data = res.data.data;\r\n      setDesignerColumns(data);\r\n      let tableNames = [];\r\n      data.forEach(d => {\r\n        if(!tableNames.includes(d.tableName)) tableNames.push(d.tableName)\r\n      })\r\n      setTables(tableNames);\r\n    }).catch(errorHandler);\r\n  }, [currentPage])\r\n\r\n  useEffect(() => {\r\n    if(!currentTable) return;\r\n    setTableLoading(true)\r\n    getDesignerColumnsByTableName(currentTable, currentPage).then(res => {\r\n      setDesignerColumns(res.data.data);\r\n      setTableLoading(false);\r\n    }).catch(errorHandler);\r\n  }, [currentTable])\r\n\r\n  useEffect(() => {\r\n    getDistinctPages().then(res => {\r\n      setPages(res.data.data);\r\n      setPagesLoading(false);\r\n    }).catch(errorHandler);\r\n  }, []);\r\n\r\n  const showAllInPage = () => {\r\n    \r\n  }\r\n\r\n  const onRowDelete = () => {}\r\n  const onRowEdit = () => {}\r\n\r\n  return (\r\n    <div className=\"container-fluid py-3\">\r\n      <div>\r\n        <h3>Designer Pages</h3>\r\n      </div>\r\n      <hr />\r\n\r\n      <div className='d-flex justify-content-between pb-2'>\r\n        <h6>Pages List</h6>\r\n        {/* <button className=\"btn btn-sm btn-primary\"\r\n          onClick={() => {\r\n            // setCreatingNewTable(true);\r\n            // setCreatingNewColumn(false);\r\n            // setEditingRow(false);\r\n            // setNewTableData(prev => ({ ...prev, tableName: \"\" }))\r\n          }}\r\n        >Create New Table</button> */}\r\n      </div>\r\n\r\n      <div className='d-flex cg-1'>\r\n        {\r\n          pagesLoading ? <div className=\"loader-sm\"></div> : <></>\r\n        }\r\n        {\r\n          pages.length ?\r\n            pages.map((t, i) => <button key={i} className={`btn btn-sm btn-${t === currentPage ? 'dark' : 'success'}`} onClick={() => { setCurrentPage(t) }} >{t}</button>) :\r\n            <div className=\"text-danger\">No Pages</div>\r\n        }\r\n      </div>\r\n      <br />\r\n      {\r\n        currentPage ?\r\n          <>\r\n            <div className='pb-2'>\r\n              <span>Tables in <strong>{currentPage}</strong> </span>\r\n            </div>\r\n            <div className='d-flex cg-1'>\r\n              {\r\n                tables.length ?\r\n                  tables.map((t, i) => <button key={i} className={`btn btn-sm btn-${t === currentTable ? 'dark' : 'success'}`} onClick={() => { setCurrentTable(t) }} >{t}</button>) :\r\n                  <div className=\"text-danger\">No Tables in this Page</div>\r\n              }\r\n            </div>\r\n          </> : <></>\r\n\r\n      }\r\n\r\n      <div>\r\n        <br />\r\n            {\r\n                tableLoading ? <div className=\"d-flex justify-content-center py-2\">\r\n                    <div className=\"loader\"></div>\r\n                </div> : <></>\r\n            }\r\n            <div style={{ overflowX: 'scroll' }}>\r\n                {designerColumns.length ? <DesignerTable hideActions={true}\r\n                  rows={designerColumns} onRowDelete={onRowDelete} onRowEdit={onRowEdit} \r\n                /> : \r\n                <div className='text-danger text-center'>No Data to Show</div>}\r\n            </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport { \n  getDesignerColumnsByTableName, getCrudColumnsByTableName, \n  getDistinctPages, getTables, postNewCrudColumn, postNewDesignerColumn, editDesignerColumn, deleteDesignerColumn \n} from \"./api\";\nimport DesignerTable from \"./component/DesignerTable.jsx\";\nimport Sidebar from \"./component/Sidebar\";\nimport { validCrudDataTypes, validInputFieldTypes } from \"./config.js\";\n// import { useSelector } from \"react-redux\";\nimport \"./styles.css\";\n// import { getPageList } from \"./actions/pages\";\n// import { useDispatch } from \"react-redux\";\nimport { Routes, Route, BrowserRouter } from \"react-router-dom\";\nimport DashboardHome from \"./pages/DashboardHome.jsx\"\nimport Datasets from \"./pages/Datasets\";\nimport Pages from \"./pages/Pages\";\n\nexport default function App () {\n  return(\n    <main className=\"d-flex w-100\" style={{ height: '100vh' }}>\n      <BrowserRouter>\n        <div className=\"col-md-3 col-lg-3 col-xl-2 px-0\">\n          <Sidebar />\n        </div>\n        <div className=\"col-md-9 col-lg-9 col-xl-10 px-0\" style={{ maxHeight: '100vh', overflowY: 'scroll' }} >\n          <Routes>\n            <Route exact path=\"/\" element={<DashboardHome />} />\n            <Route exact path=\"/datasets\" element={<Datasets/>} />\n            <Route exact path=\"/pages\" element={<Pages/>} />\n          </Routes>\n        </div>\n      </BrowserRouter>\n    </main>\n  )\n}\n\n// export default function App() {\n//   const [pageList, setPageList] = useState([]);\n//   // const pageList = useSelector(state => state.pageList);\n//   const [pageName, setPageName] = useState(\"\");\n\n//   const [tableList, setTableList] = useState([]);\n//   const [tableName, setTableName] = useState(\"\");\n//   const [tableIsMaster, setTableIsMaster] = useState(true);\n//   const [joinColumn, setJoinColumn] = useState(\"\");\n\n//   const [designerColumns, setDesignerColumns] = useState([]);\n//   const [designerColumnData, setDesignerColumnData] = useState({\n//     label: \"\", displayMode: \"TEXT\", \n//     displayLength: \"\", applyFilter: 0, \n//   })\n//   const [crudColumns, setCrudColumns] = useState([]);\n//   const [currentCrudColumn, setCurrentCrudColumn] = useState({\n//     columnName: \"\", dataType: \"STRING\", tableName: \"\",\n//     maxLength: \"\", nullConstrain: false\n//   });\n//   const [columnList, setColumnList] = useState([]);\n//   const [columnName, setColumnName] = useState(\"\");\n\n//   const [isNewEntry, setIsNewEntry] = useState({ pageName: false, tableName: false, columnName: false });\n//   const [isLoading, setIsLoading] = useState({ pageName: false, tableName: true, columnName: true });\n\n//   const fetchTableList = (argument) => {\n//     setIsLoading(prev => ({ ...prev, tableName: true }))\n//     getTables(argument).then(res => {\n//       setTableList(res.data.data);\n//       setIsLoading(prev => ({ ...prev, tableName: false }))\n//     }).catch(err => {\n//       console.log(err);\n//       alert(\"Error while fetching Table List\")\n//       setIsLoading(prev => ({ ...prev, tableName: false }));\n//     })\n//   }\n\n//   const applyDesignerColumnResponse = (res) => {\n//     const columnsData = res.data.data;\n//     setDesignerColumns(columnsData)\n//     if(columnsData.length){\n//       setTableIsMaster(columnsData[0].isMaster)\n//       setJoinColumn(columnsData[0].joinColumn || '')\n//     }\n//   }\n\n//   const columnErrorHandler = (err) => {\n//     console.log(err);\n//     alert(\"Error in fetching Column Details\");\n//   }\n\n//   const checkNewEntry = (e) => {\n//     const value = e.target.value;\n//     const fieldName = e.target.name;\n//     switch(fieldName){\n//       case 'pageName': {\n//         setIsNewEntry(prev => (\n//           { ...prev, [fieldName]: value && !pageList.includes(value) }\n//         ));\n//         const argument = pageList.includes(value) ? pageName : '';\n//         fetchTableList(argument);\n//         if(tableName && value.length > 3){\n//           if(!pageList.includes(value)) {\n//             getDesignerColumnsByTableName(tableName).then(applyDesignerColumnResponse).catch(columnErrorHandler)\n//           } else {\n//             getDesignerColumnsByTableName(tableName, pageName).then(applyDesignerColumnResponse).catch(columnErrorHandler)\n//           }\n//         }\n//         break;\n//       }\n\n//       case 'tableName': {\n//         setIsNewEntry(prev => (\n//           { ...prev, [fieldName]: value && !tableList.includes(value) }\n//         ));\n//         if(tableList.includes(value)){\n//           if(isNewEntry.pageName) {\n//             getDesignerColumnsByTableName(tableName).then(applyDesignerColumnResponse).catch(columnErrorHandler)\n//           } else {\n//             getDesignerColumnsByTableName(tableName, pageName).then(applyDesignerColumnResponse).catch(columnErrorHandler)\n//           }\n//           setIsLoading(prev => ({...prev, columnName: true}))\n//           getCrudColumnsByTableName(value).then(res => {\n//             const crudCols = res.data.data;\n//             const colList = crudCols.map(c => c.columnName);\n//             setColumnList(colList);\n//             setCrudColumns(crudCols);\n//             setIsLoading(prev => ({...prev, columnName: false}))\n//           }).catch(err => {\n//             console.log(err); alert(\"Alert in fetching Crud Column Details\");\n//             setIsLoading(prev => ({...prev, columnName: false}))\n//           })\n//         } else {\n//           setDesignerColumns([]);\n//           setColumnList([]);\n//         }\n//         break;\n//       }\n\n//       case 'columnName': {\n//         setIsNewEntry(prev => (\n//           { ...prev, [fieldName]: value && !columnList.includes(value) }\n//         )); \n//         if(columnList.includes(value)){\n//           const cuCrudData = crudColumns.find(c => c.columnName === value);\n//           console.log(cuCrudData);\n//           setCurrentCrudColumn(cuCrudData);\n//         }\n//         break;\n//       }\n\n//       default: break;\n//     }\n//   }\n\n//   const changeMultiInput = (e) => {\n//     switch(e.target.name){\n//       case 'pageName': setPageName(e.target.value); break;\n//       case 'tableName': setTableName(e.target.value); break;\n//       case 'columnName': { \n//         setColumnName(e.target.value); \n//         setCurrentCrudColumn(prev => ({...prev, columnName: e.target.value })); \n//         break; \n//       }\n//       default: break;\n//     }\n//   }\n\n//   const createCrudColumn = () => {\n//     postNewCrudColumn({...currentCrudColumn, tableName}).then(res => {\n//       const newCrudColumn = res.data.data;\n//       setCrudColumns(prev => [...prev, newCrudColumn]);\n//       setColumnList(prev => [...prev, newCrudColumn.columnName]);\n//       alert(\"New Crud Column Inserted\");\n//     }).catch(err => {\n//       console.log(err);\n//       alert(\"Error in Posting Crud Data\");\n//     })\n//   }\n\n//   const createDesignerColumn = (e) => {\n//     e.preventDefault();\n//     postNewDesignerColumn(designerColumnData, pageName, tableName, columnName, tableIsMaster, joinColumn)\n//     .then(res => {\n//       const newDesData = res.data.data;\n//       setDesignerColumns(prev => [...prev, newDesData]);\n//       alert(\"Data Inserted\");\n//     }).catch(err => {\n//       console.log(err);\n//       alert(\"Error in Posting Designer Data\");\n//     })\n//   }\n\n//   useEffect(() => {\n//     setIsLoading(prev => ({...prev, pageName: true}))\n//     getDistinctPages().then(response => {\n//       setPageList(response.data.data)\n//       setIsLoading(prev => ({...prev, pageName: false}))\n//     }).catch(err => {\n//       console.log(err);\n//       alert(\"Error while fetching Pages List\");\n//       setIsLoading(prev => ({...prev, pageName: false}))\n//     })\n//   }, []);\n\n//   return (\n//     <div className=\"container-fluid py-4\">\n//       <div className=\"col-12\">\n//         <h2 className=\"fw-500\">Automation System</h2>\n//       </div>\n//       <div className=\"d-flex flex-wrap\">\n//         <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//           <div className={`w-100 multi-input-hold ${isNewEntry.pageName ? 'new': ''}`}>\n//             <label>Page Name</label>\n//             <input type=\"text\" name=\"pageName\" list=\"pageList\" placeholder=\"Choose/Enter Page Name\" disabled={isLoading.pageName}\n//               className=\"form-control\" onKeyUp={checkNewEntry} value={pageName} onChange={changeMultiInput}\n//               />\n//             <datalist id=\"pageList\">\n//               { pageList.map((p, i) => (<option key={i} value={p} />)) }\n//             </datalist>\n//           </div>\n//           <label>This is a New Page</label>\n//         </div>\n\n//         <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//           <div className={`w-100 multi-input-hold ${isNewEntry.tableName ? 'new': ''}`}>\n//             <label>Table Name</label>\n//             <input type=\"text\" name=\"tableName\" list=\"tableList\" placeholder=\"Choose/Enter Table Name\" disabled={isLoading.tableName}\n//               className=\"form-control\" onKeyUp={checkNewEntry} value={tableName} onChange={changeMultiInput}\n//               />\n//             <datalist id=\"tableList\">\n//               { tableList.map((t, i) => (<option key={i} value={t} />)) }\n//             </datalist>\n//           </div>\n//           <label>This is a New Table</label>\n//         </div>\n\n//         <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//           <label>Table Type</label>\n//           <div className=\"d-flex cg-1\">\n//             <div className=\"form-check\">\n//               <input type=\"radio\" name=\"isMaster\" value=\"1\" checked={tableIsMaster} disabled={!isNewEntry.tableName && designerColumns.length}\n//                 className=\"form-check-input\" id=\"imt\" onChange={() => {setTableIsMaster(true); setJoinColumn('');}} />\n//               <label htmlFor=\"imt\" className=\"form-check-label\">Master</label>\n//             </div>\n//             <div className=\"form-check\">\n//               <input type=\"radio\" name=\"isMaster\" value=\"0\" checked={!tableIsMaster} disabled={!isNewEntry.tableName && designerColumns.length}\n//                 className=\"form-check-input\" id=\"imf\" onChange={() => {setTableIsMaster(false)}}/>\n//               <label htmlFor=\"imf\" className=\"form-check-label\">Detail</label>\n//             </div>\n//           </div>\n//         </div>\n\n//         <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//           <div className={`w-100 multi-input-hold ${tableIsMaster ? 'hide': ''}`}>\n//             <label>Join Column</label>\n//             <input type=\"text\" name=\"joinColumn\" list=\"columnList\" placeholder=\"Choose/Enter Join Column\" disabled={!isNewEntry.tableName && designerColumns.length}\n//               className=\"form-control\" value={joinColumn} onChange={(e) => { setJoinColumn(e.target.value) }}\n//               />\n//             <datalist id=\"columnList\">\n//               { columnList.map((c, i) => (<option key={i} value={c} />)) }\n//             </datalist>\n//           </div>\n//           <label>This is a New Table</label>\n//         </div>\n\n//       </div>\n//       <br />\n      \n//       <div className=\"border p-2\">\n//         <div className=\"d-flex flex-wrap w-100\">\n//           <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//             <div className={`w-100 multi-input-hold ${isNewEntry.columnName ? 'new' : ''}`}>\n//               <label>Column Name</label>\n//               <input type=\"text\" name=\"columnName\" list=\"columnList\" placeholder=\"Choose/Enter Column Name\" disabled={isLoading.columnName}\n//                 className=\"form-control\" onKeyUp={checkNewEntry} value={columnName} onChange={changeMultiInput}\n//               />\n//               <datalist id=\"columnList\" >\n//                 {columnList.map((c, i) => (<option key={i} value={c} />))}\n//               </datalist>\n//             </div>\n//             <label>This is new Column</label>\n//           </div>\n\n//           <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//             <label>Data Type</label>\n//             <select name=\"dataType\" className=\"form-control\" value={currentCrudColumn.dataType} disabled={!isNewEntry.columnName}\n//               onChange={(e) => { setCurrentCrudColumn(prev => ({ ...prev, dataType: e.target.value })) }}>\n//               {\n//                 validCrudDataTypes.map((d, i) => <option value={d} key={i}>{d}</option>)\n//               }\n//             </select>\n//           </div>\n\n//           <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//             <label>Data Length</label>\n//             <input type=\"number\" name=\"dataLength\" className=\"form-control\" value={currentCrudColumn.maxLength} disabled={!isNewEntry.columnName}\n//               onChange={(e) => { setCurrentCrudColumn(prev => ({ ...prev, maxLength: e.target.value })) }}\n//               placeholder=\"Data Length\"\n//             />\n//           </div>\n\n//           <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//             <label>Null Constrain</label>\n//             <div className=\"d-flex cg-1\">\n//               <div className=\"form-check\">\n//                 <input type=\"radio\" name=\"nullConstrain\" id=\"nct\" className=\"form-check-input\" checked={currentCrudColumn.nullConstrain === true}\n//                   disabled={!isNewEntry.columnName} onChange={() => { setCurrentCrudColumn(prev => ({ ...prev, nullConstrain: true })) }} />\n//                 <label htmlFor=\"nct\" className=\"form-check-label\">True</label>\n//               </div>\n//               <div className=\"form-check\">\n//                 <input type=\"radio\" name=\"nullConstrain\" id=\"ncf\" className=\"form-check-input\" checked={currentCrudColumn.nullConstrain === false}\n//                   disabled={!isNewEntry.columnName} onChange={() => { setCurrentCrudColumn(prev => ({ ...prev, nullConstrain: false })) }} />\n//                 <label htmlFor=\"ncf\" className=\"form-check-label\">False</label>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"col-12 d-flex py-2\">\n//           <button className={`btn btn-primary ml-auto ${isNewEntry.columnName ? '' : 'hide'}`}\n//             onClick={createCrudColumn}\n//           >Add Coulumn</button>\n//         </div>\n//       </div>\n//       <br />\n\n//       <div className={`border p-2 ${columnName ? '': 'hide'}`}>\n//         <form className=\"d-flex w-100 flex-wrap\" onSubmit={createDesignerColumn}>\n//           <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//             <label>Label</label>\n//             <input type=\"text\" required name=\"label\" className=\"form-control\" value={designerColumnData.label}\n//               onChange={(e) => { setDesignerColumnData(prev => ({ ...prev, label: e.target.value })) }}\n//               placeholder=\"Label\"\n//             />\n//           </div>\n//           <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//             <label>Display Mode</label>\n//             <select name=\"displayMode\" className=\"form-control\" value={designerColumnData.dataType}\n//               onChange={(e) => { setDesignerColumnData(prev => ({ ...prev, displayMode: e.target.value })) }}>\n//               {\n//                 validInputFieldTypes.map((t, i) => <option value={t} key={i}>{t}</option>)\n//               }\n//             </select>\n//           </div>\n//           <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//             <label>Display Length</label>\n//             <input type=\"number\" name=\"displayLength\" className=\"form-control\" value={designerColumnData.displayLength}\n//               onChange={(e) => { setDesignerColumnData(prev => ({ ...prev, displayLength: e.target.value })) }}\n//               placeholder=\"Display Length\"\n//             />\n//           </div>\n//           <div className=\"col-lg-4 col-xl-3 col-md-6 py-2\">\n//             <label>Apply Filter</label>\n//             <div className=\"d-flex cg-1\">\n//               <div className=\"form-check\">\n//                 <input type=\"radio\" name=\"applyFilter\" id=\"aft\" className=\"form-check-input\" checked={designerColumnData.applyFilter === 1}\n//                   onChange={() => { setDesignerColumnData(prev => ({ ...prev, applyFilter: 1 })) }} />\n//                 <label htmlFor=\"aft\" className=\"form-check-label\">True</label>\n//               </div>\n//               <div className=\"form-check\">\n//                 <input type=\"radio\" name=\"applyFilter\" id=\"aff\" className=\"form-check-input\" checked={designerColumnData.applyFilter === 0}\n//                   onChange={() => { setDesignerColumnData(prev => ({ ...prev, applyFilter: 0 })) }} />\n//                 <label htmlFor=\"aff\" className=\"form-check-label\">False</label>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-12 d-flex\">\n//             <button className=\"btn btn-success ml-auto\" type=\"submit\">Submit</button>\n//           </div>\n//         </form>\n//       </div>\n//       <br />\n\n//       <div style={{ overflowX : 'scroll' }}>\n//         { designerColumns.length ? <DesignerTable rows={designerColumns}/> : <></> }\n//       </div>\n//     </div>\n//   );\n// }\n\n\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport reducerList from \"./reducers\";\nimport App from \"./App\";\n\nconst store = createStore(reducerList, applyMiddleware(thunk));\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>\n);\n"],"sourceRoot":""}